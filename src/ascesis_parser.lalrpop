use lalrpop_util::ErrorRecovery;
use crate::{
    CesFile, CesFileBlock, CesName, ImmediateDef, CesInstance,
    VisBlock, VisValue, CapacityBlock, MultiplierBlock, InhibitorBlock,
    Rex, ThinArrowRule, FatArrowRule, Polynomial, Node, BinOp, Literal,
};

grammar<'env>(errors: &'env mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

// ces_file = { immediate_def | template_def | context_block } ;
pub CesFile: CesFile = <CesFileBlock*> => <>.into();

pub CesFileBlock: CesFileBlock = {
    <ImmediateDef> => <>.into(),
    <CapBlock> => <>.into(),
    <MulBlock> => <>.into(),
    <InhBlock> => <>.into(),
};

// Structure definition, immediate form

// immediate_def = immediate_sig "{" rex "}" ;
pub ImmediateDef: ImmediateDef =
    <sig: ImmediateSig> "{" <rex: Rex> "}" =>
        ImmediateDef::new(sig, rex);

// immediate_sig = "ces" identifier ;
ImmediateSig: CesName =
    "ces" <Identifier> =>
        CesName::from(<>);

// Structure definition, template form

// FIXME
// template_def = template_sig "{" rex "}" ;
// template_sig = "ces" identifier "(" template_args ")" ;
// template_args = arg_decl { "," arg_decl } [ "," ] ;
// arg_decl = identifier ":" ( "Node" | "CES" | "Size" | "String" ) ;

// Structure instantiation

// ces_instance = identifier "(" ")"
//              | identifier "!" "(" instance_args ")" ;
pub CesInstance: CesInstance = {
    <name: Identifier> "(" ")" =>
        CesInstance::new(CesName::from(name)),
    <name: Identifier> "!" "(" <args: InstanceArgs> ")" =>
        CesInstance::new(CesName::from(name)).with_args(args),
};

// instance_args = arg_value { ","  arg_value } [ "," ] ;
InstanceArgs: Vec<String> = {
    <head: ArgValue> <tail: CommaThenArgValue*> ","? => {
        let mut tail = tail;
        let mut result = vec![head];
        result.append(&mut tail);
        result
    }
};

CommaThenArgValue: String = "," <ArgValue>;

// arg_value = identifier | size | string ;
ArgValue: String = <Identifier>;

// Context

// context_block = vis_block | cap_block | mul_block | inh_block ;

// vis_block = "vis" "{" vis_list "}" ;
pub VisBlock: VisBlock = "vis" "{" <VisList> "}";

// vis_list = vis_field { "," vis_field } [ "," ] ;
VisList: VisBlock =
    <head: VisField> <tail: CommaThenVisField*> ","? =>
        head.with_more(tail);

CommaThenVisField: VisBlock = "," <VisField>;

// vis_field = identifier ":" vis_value ;
VisField: VisBlock =
    <key: Identifier> ":" <value: VisValue> =>
        VisBlock::new(key, value);

// vis_value = size
//           | string
//           | "{" vis_list "}" ;
VisValue: VisValue = {
    <Size> => <>.into(),
    <Name> => <>.into(),
    "{" <VisList> "}" => <>.into(),
};

// cap_block = "cap" "{" cap_list "}" ;
pub CapBlock: CapacityBlock =
    "cap" "{" <head: CapField> <tail: CommaThenCapField*> ","? "}" =>
        head.with_more(tail);

// cap_list = cap_field { "," cap_field } [ "," ] ;
CommaThenCapField: CapacityBlock = "," <CapField>;

// cap_field = size node_list ;
CapField: CapacityBlock =
    <size: Size> <nodes: NodeList> =>
        CapacityBlock::new(size, nodes).unwrap();

// mul_block = "mul" "{" mul_list "}" ;
pub MulBlock: MultiplierBlock =
    "mul" "{" <head: MulField> <tail: CommaThenMulField*> ","? "}" =>
        head.with_more(tail);

// mul_list = mul_field { "," mul_field } [ "," ] ;
CommaThenMulField: MultiplierBlock = "," <MulField>;

// mul_field = size node_list ( "->" | "<-" ) node_list ;
MulField: MultiplierBlock = {
    <size: Size> <pre_nodes: NodeList> "->" <post_set: NodeList> =>
        MultiplierBlock::new_effects(size, pre_nodes, post_set).unwrap(),
    <size: Size> <post_nodes: NodeList> "<-" <pre_set: NodeList> =>
        MultiplierBlock::new_causes(size, post_nodes, pre_set).unwrap(),
};

// inh_block = "inh" "{" inh_list "}" ;
pub InhBlock: InhibitorBlock =
    "inh" "{" <head: InhField> <tail: CommaThenInhField*> ","? "}" =>
        head.with_more(tail);

// inh_list = inh_field { "," inh_field } [ "," ] ;
CommaThenInhField: InhibitorBlock = "," <InhField>;

// inh_field = node_list ( "->" | "<-" ) node_list ;
InhField: InhibitorBlock = {
    <pre_nodes: NodeList> "->" <post_set: NodeList> =>
        InhibitorBlock::new_effects(pre_nodes, post_set).unwrap(),
    <post_nodes: NodeList> "<-" <pre_set: NodeList> =>
        InhibitorBlock::new_causes(post_nodes, pre_set).unwrap(),
};

// Rule expression

// rex = thin_arrow_rule
//     | fat_arrow_rule
//     | rex_term { [ "+" ] rex_term } ;
pub Rex: Rex = {
    <ThinArrowRule> => <>.into(),
    <FatArrowRule> => <>.into(),
    <head: RexTerm> <tail: (<AddOp?> <RexTerm>)*> => head.with_more(tail),
};

// rex_term = ces_instance | "{" rex "}" ;
RexTerm: Rex = {
    <CesInstance> => <>.into(),
    "{" <Rex> "}",
};

// Arrow rules

// thin_arrow_rule = e_rule | c_rule | ec_rule | ce_rule | fw_rule | bw_rule ;
// e_rule = node_list "->" polynomial ;
// c_rule = node_list "<-" polynomial ;
// ec_rule = node_list "->" polynomial "<-" polynomial ;
// ce_rule = node_list "<-" polynomial "->" polynomial ;
// fw_rule = "+" plain_polynomial "->" node_list "->" polynomial ;
// bw_rule = "+" plain_polynomial "<-" node_list "<-" polynomial ;
pub ThinArrowRule: ThinArrowRule = {
    // effect-only rule
    <nodes: Polynomial> "->" <effect: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_effect(effect)
    },
    // cause-only rule
    <nodes: Polynomial> "<-" <cause: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_cause(cause)
    },
    // effect-then-cause rule
    <nodes: Polynomial> "->" <effect: Polynomial> "<-" <cause: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_cause(cause).with_effect(effect)
    },
    // cause-then-effect rule
    <nodes: Polynomial> "<-" <cause: Polynomial> "->" <effect: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_cause(cause).with_effect(effect)
    },
    // forward rule
    <cause: Polynomial> "->" <nodes: Polynomial> "->" <effect: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_cause(cause).with_effect(effect)
    },
    // backward rule
    <effect: Polynomial> "<-" <nodes: Polynomial> "<-" <cause: Polynomial> => {
        ThinArrowRule::new().with_nodes(nodes).unwrap().with_cause(cause).with_effect(effect)
    },
};

// fat_arrow_rule = polynomial ( "=>" | "<=" ) polynomial { ( "=>" | "<=" ) polynomial } ;
pub FatArrowRule: FatArrowRule =
    <head: Polynomial> <tail: (<FatOp> <Polynomial>)+> =>
        FatArrowRule::from_parts(head, tail);

// Polynomial

// polynomial = [ [ polynomial ] "+" ] poly_term { poly_term } ;
pub Polynomial: Polynomial = {
    AddOp? <head: PolyTerm> <tail: PolyTerm*> => head.with_product_multiplied(tail),
    <head: Polynomial> AddOp <tail: PolyTerm+> => head.with_product_added(tail),
};

// poly_term = identifier | "(" polynomial ")" ;
#[inline]
PolyTerm: Polynomial = {
    <Identifier> => Polynomial::from(Node::from(<>)),
    "(" <Polynomial> ")",
};

NodeList: Polynomial = <Polynomial>;

// Operators

AddOp: BinOp = "+" => BinOp::Add;
ThinOp: BinOp = { "->" => BinOp::ThinTx, "<-" => BinOp::ThinRx };
FatOp: BinOp = { "=>" => BinOp::FatTx, "<=" => BinOp::FatRx };

// Identifiers

Identifier: String = r"[A-Za-z_][A-Za-z0-9_]*" => <>.to_owned();

// Literals

Size: Literal = r"[0-9]+" => Literal::from_digits(<>).unwrap();
Name: Literal = r#""[^"]*""# => Literal::from_quoted_str(<>).unwrap();

# Ascesis syntax in EBNF

# Some aspects of the language are described informally in other
# files: lexer-implementation.md, parser-implementation.md.

ces_file = { immediate_def | template_def | context_block } ;

## Structure definition, immediate form

immediate_def = immediate_sig "{" [ rex ] "}" ;
immediate_sig = "ces" identifier ;

## Structure definition, template form

# Empty argument list is valid (defines a _black hole_).

template_def = template_sig "{" [ rex ] "}" ;
template_sig = "ces" identifier "(" { template_args } ")" ;
template_args = arg_decl { "," arg_decl } [ "," ] ;
arg_decl = identifier ":" ( "Dot" | "CES" | "Size" | "Name" ) ;

## Structure instantiation

ces_immediate = identifier "(" ")" ;

ces_instance = identifier "!" "(" [ instance_args ] ")" ;

instance_args = arg_value { ","  arg_value } [ "," ] ;

arg_value = identifier | size | name ;

## Context

context_block = prop_block
              | caps_block
              | unbounded_block
              | weights_block
              | inhibit_block
              | activate_block
              | drop_block ;

prop_selector = "vis" | "sat" ;
prop_block = prop_selector "{" [ prop_list ] "}" ;
prop_list = prop_field { "," prop_field } [ "," ] ;
prop_field = identifier ":" prop_value ;
prop_value_array = prop_value { "," prop_value } [ "," ] ;

prop_value = name
           | size_list
           | dot_list
           | "[" prop_value_array "]"
           | "{" prop_list "}" ;

caps_block = "caps" "{" [ cap_list ] "}" ;
cap_list = cap_field { "," cap_field } [ "," ] ;
cap_field = size dot_list ;

unbounded_block = "unbounded" "{" [ dot_list ] "}" ;

weights_block = "weights" "{" [ weight_list ] "}" ;
weight_list = weight_field { "," weight_field } [ "," ] ;
weight_field = size dot_list ( "->" | "<-" ) dot_list ;

inhibit_block = "inhibit" "{" [ inhibit_list ] "}" ;
inhibit_list = inhibit_field { "," inhibit_field } [ "," ] ;
inhibit_field = dot_list ( "->" | "<-" ) dot_list ;

activate_block = "activate" "{" [ activate_list ] "}" ;
activate_list = activate_field { "," activate_field } [ "," ] ;
activate_field = activate_list "->" dot_list ;

drop_block = "drop" "{" [ drop_list ] "}" ;
drop_list = drop_field { "," drop_field } [ "," ] ;
drop_field = dot_list "<-" dot_list ;

## Rule expression

rex = thin_arrow_rule
    | fat_arrow_rule
    | rex_term { [ "+" ] rex_term } ;

rex_term = ces_instance | "{" rex "}" ;

## Arrow rules

thin_arrow_rule = e_rule | c_rule | ec_rule | ce_rule | fw_rule | bw_rule ;

# effect polynomial with explicit dot list on the left
e_rule = dot_list "->" polynomial ;

# cause polynomial with explicit dot list on the left
c_rule = dot_list "<-" polynomial ;

# effect-then-cause polynomial with explicit dot list on the left
ec_rule = dot_list "->" polynomial "<-" polynomial ;

# cause-then-effect polynomial with explicit dot list on the left
ce_rule = dot_list "<-" polynomial "->" polynomial ;

# cause-then-effect pair of polynomials with explicit dot list in the
# middle
fw_rule = "+" plain_polynomial "->" dot_list "->" polynomial ;

# effect-then-cause pair of polynomials with explicit dot list in the
# middle
bw_rule = "+" plain_polynomial "<-" dot_list "<-" polynomial ;

dot_list = identifier { identifier } ;
size_list = size { size } ;

# multi-polynomial rule with implicit dot lists
fat_arrow_rule = polynomial ( "=>" | "<=" | "<=>" ) polynomial { ( "=>" | "<=" | "<=>" ) polynomial } ;

## Polynomial

polynomial = [ [ polynomial ] "+" ] poly_term { poly_term } ;
poly_term = identifier | "(" polynomial ")" ;

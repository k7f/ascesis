# Cesar syntax in EBNF

# Some aspects of the language are described informally in files
# lexer-implementation.md and parser-implementation.md.

ces_file = { ces_immediate_def | ces_template_def | ces_template_inst | meta_block } ;

## Structure definition

ces_immediate_def = ces_immediate_sig rex ;
ces_immediate_sig = "ces" identifier ;

ces_template_def = ces_template_sig rex ;

# empty argument list is disallowed
ces_template_sig = "ces" identifier "(" arg_list_decl ")" ;

## Structure instantiation

# empty argument list is disallowed
ces_template_inst = identifier "(" arg_list ")" ;

## Context

meta_block = labels_block | caps_block ;
labels_block = "labels" "{" label_spec { "," label_spec } [ "," ] "}" ;
label_spec = identifier ":" string ;
caps_block = "caps" "{" cap_spec { "," cap_spec } [ "," ] "}" ;
cap_spec = identifier ":" size ;

## Argument declarations and values

arg_list_decl = arg_spec { "," arg_spec } [ "," ] ;
arg_spec = identifier ":" ( "Node" | "CES" | "Size" | "String" ) ;
arg_list = arg_value { ","  arg_value } [ "," ] ;
arg_value = identifier | size | string ;

## Rule expressions

rex = "{" thin_rule "}"
    | "{" fat_rule "}"
    | "{" rex { [ "+" ] rex } "}" ;

## Structural rules (strules)

thin_rule = e_rule | c_rule | ec_rule | ce_rule | fw_rule | bw_rule ;

# effect polynomial with explicit node list on the left
e_rule = node_list "->" polynomial ;

# cause polynomial with explicit node list on the left
c_rule = node_list "<-" polynomial ;

# effect-then-cause polynomial with explicit node list on the left
ec_rule = node_list "->" polynomial "<-" polynomial ;

# cause-then-effect polynomial with explicit node list on the left
ce_rule = node_list "<-" polynomial "->" polynomial ;

# cause-then-effect pair of polynomials with explicit node list in the
# middle
fw_rule = "+" plain_polynomial "->" node_list "->" polynomial ;

# effect-then-cause pair of polynomials with explicit node list in the
# middle
bw_rule = "+" plain_polynomial "<-" node_list "<-" polynomial ;

node_list = identifier { ","  | identifier } [ "," ] ;

# multi-polynomial rule with implicit node lists
fat_rule = polynomial ( "=>" | "<=" ) polynomial { ( "=>" | "<=" ) polynomial } ;

## Polynomial

polynomial = [ "+" ] plain_polynomial ;
plain_polynomial = [ plain_polynomial "+" ] poly_term { poly_term } ;
poly_term = identifier | "(" polynomial ")" ;
